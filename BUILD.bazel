package(
    default_visibility = ["//visibility:public"],
    features = [
        # Causes issues with ares_config.h or ares_build.h trying to parse windows/linux on both platforms
        "-parse_headers",
    ],
)

LOCAL_DEFINES = [
    "HAVE_CONFIG_H",
    "_GNU_SOURCE",
]

alias(
    name = "c-ares",
    actual = ":ares",
)

cc_library(
    name = "ares",
    srcs = glob(
               [
                   "src/lib/**/*.c",
                   "src/lib/**/*.h",
               ],
               exclude = ["src/lib/ares_config_*"],
           ) +
           select({
               "@platforms//os:windows": [
                   "src/lib/ares_config_windows.h",
               ],
               "@platforms//os:linux": [
                   "src/lib/ares_config_linux.h",
               ],
               "@platforms//os:macos": [
                   "src/lib/ares_config_macos.h",
               ],
               "//conditions:default": [],
           }),
    hdrs = [
        "include/ares.h",
        "include/ares_build.h",
        "include/ares_dns.h",
        "include/ares_dns_record.h",
        "include/ares_nameser.h",
        "include/ares_version.h",
    ] + select({
        "@platforms//os:windows": [
            "include/ares_build_windows.h",
        ],
        "@platforms//os:linux": [
            "include/ares_build_linux.h",
        ],
        "@platforms//os:macos": [
            "include/ares_build_macos.h",
        ],
        "//conditions:default": [],
    }),
    defines = ["CARES_STATICLIB"],
    includes = [
        "include",
        "src/lib",
        "src/lib/include",
    ],
    local_defines = LOCAL_DEFINES,
    strip_include_prefix = "include",
    visibility = [
        "//visibility:public",
    ],
)

cc_library(
    name = "ares_getopt",
    srcs = ["src/tools/ares_getopt.c"],
    hdrs = ["src/tools/ares_getopt.h"],
    local_defines = LOCAL_DEFINES,
    strip_include_prefix = "src/tools",
)

cc_binary(
    name = "ahost",
    srcs = ["src/tools/ahost.c"],
    local_defines = LOCAL_DEFINES,
    deps = [
        ":ares",
        ":ares_getopt",
    ],
)

cc_binary(
    name = "adig",
    srcs = ["src/tools/adig.c"],
    local_defines = LOCAL_DEFINES,
    deps = [
        ":ares",
        ":ares_getopt",
    ],
)

cc_library(
    name = "test_sources",
    testonly = 1,
    srcs = glob([
        "test/ares-test-*.cc",
        "test/dns-proto*.cc",
    ]),
    hdrs = [
        "test/ares-test.h",
        "test/ares-test-ai.h",
        "test/dns-proto.h",
    ],
    # We can push these for tests
    defines = LOCAL_DEFINES,
    includes = ["test"],
    deps = [
        ":ares",
        "@googletest//:gtest",
    ],
)

cc_test(
    name = "tests",
    shard_count = 32,
    srcs = ["test/ares-test.cc"],
    args = [
        "--gtest_filter=-*LiveSearchTXT*:*LiveSearchANY*:*LiveSearchA*",
    ],
    deps = [
        ":test_sources",
        "@googletest//:gtest_main",
    ],
)

filegroup(
    name = "fuzz_input",
    srcs = glob(["test/fuzzinput/**/*"]),
)

filegroup(
    name = "fuzz_names",
    srcs = glob(["test/fuzznames/**/*"]),
)

cc_test(
    name = "fuzz_tests",
    srcs = [
        "test/ares-fuzz.c",
        "test/ares-test-fuzz.c",
    ],
    args = [
        "$(locations :fuzz_input)",
    ],
    data = [":fuzz_input"],
    deps = [
        ":ares",
    ],
)

cc_test(
    name = "fuzz_name_tests",
    srcs = [
        "test/ares-fuzz.c",
        "test/ares-test-fuzz-name.c",
    ],
    args = [
        "$(locations :fuzz_names)",
    ],
    data = [":fuzz_names"],
    deps = [
        ":ares",
    ],
)

cc_test(
    name = "dns_dump_tests",
    defines = LOCAL_DEFINES,
    srcs = [
        "test/dns-dump.cc",
        "test/dns-proto.cc",
        "test/dns-proto.h",
    ],
    args = [
        "$(location test/fuzzinput/answer_a)",
        "$(location test/fuzzinput/answer_aaaa)",
    ],
    data = [
        "test/fuzzinput/answer_a",
        "test/fuzzinput/answer_aaaa",
    ],
    deps = [
        ":ares",
    ],
)

cc_binary(
    name = "query_loop",
    testonly = 1,
    srcs = [
        "test/ares_queryloop.c",
    ],
    deps = [
        ":ares",
    ],
)
